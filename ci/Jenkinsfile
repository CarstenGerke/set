pipeline {
  agent {
    kubernetes {
      yamlFile 'ci/kubernetes.yaml'
    }
  }

  options {
    timeout(time: 20, unit: 'MINUTES')
    buildDiscarder(logRotator(numToKeepStr: '10'))
  }

  stages {
    stage('Build NodeJS') {    
      environment {
        GITHUB_TOKEN = credentials('github-bot-token')
      }

      steps {
        container('nodejs') {
          dir('web/textviewer') {
            npmBuildTo target: '../../java/bundles/org.eclipse.set.feature/rootdir/web/textviewer/'
          }
           dir('web/pdf') {
            npmBuildTo target: '../../java/bundles/org.eclipse.set.feature/rootdir/web/pdf/'
          }
        }
      }
    }

    stage('Build Java') {
      steps {
        container('maven') {
          mvn goal: 'clean integration-test', dependencies: 'maven.deps'
          archiveArtifacts artifacts: 'java/bundles/org.eclipse.set.releng.set.product/target/products/SET-*.zip'
        }
      }
    }
    stage('Process Licenses') {
      steps {
        container('maven') {
          collectDependencies()
        }
      }
    }


    stage('Deploy Snapshot')
    {
      when {
        anyOf {
          buildingTag()
          branch 'main'
        }
      }
      steps {
        deployP2Site name: 'set', path: 'java/bundles/org.eclipse.set.releng.repository/target/repository'
        deployProduct name: 'set', path: 'java/bundles/org.eclipse.set.releng.set.product/target/products/SET-*.zip'
      }
    }
  }
  post {
    always {
      // Publish JUnit test result
      junit testResults: 'java/bundles/*/target/surefire-reports/*.xml', allowEmptyResults: true
      recordIssues aggregatingResults: true, 
        enabledForFailure: true, 
        tools: [
          checkStyle(), 
          mavenConsole()],
        qualityGates: [[threshold: 1, type: 'TOTAL', unstable: true]]
    }
  }
}